<?php
/**
 * RosteringApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Kimono
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Interop Data API
 *
 * Interop Data APIs provide access to the data objects and events from Interop Cloud repositories and Integration repositories
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Kimono\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Kimono\ApiException;
use Kimono\Configuration;
use Kimono\HeaderSelector;
use Kimono\ObjectSerializer;

/**
 * RosteringApi Class Doc Comment
 *
 * @category Class
 * @package  Kimono
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RosteringApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'findCourse' => [
            'application/json',
        ],
        'findLEA' => [
            'application/json',
        ],
        'findOrg' => [
            'application/json',
        ],
        'findPerson' => [
            'application/json',
        ],
        'findSection' => [
            'application/json',
        ],
        'findTerm' => [
            'application/json',
        ],
        'listCourses' => [
            'application/json',
        ],
        'listCoursesForOrg' => [
            'application/json',
        ],
        'listLEAs' => [
            'application/json',
        ],
        'listOrgs' => [
            'application/json',
        ],
        'listPersons' => [
            'application/json',
        ],
        'listSchools' => [
            'application/json',
        ],
        'listSections' => [
            'application/json',
        ],
        'listSectionsForOrg' => [
            'application/json',
        ],
        'listStudents' => [
            'application/json',
        ],
        'listStudentsForOrg' => [
            'application/json',
        ],
        'listTeachers' => [
            'application/json',
        ],
        'listTeachersForOrg' => [
            'application/json',
        ],
        'listTerms' => [
            'application/json',
        ],
        'listTermsForOrg' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation findCourse
     *
     * Find a Course by $sys.id
     *
     * @param  string $id $sys.id of the Course to find (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findCourse'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kimono\Model\Course
     */
    public function findCourse($id, string $contentType = self::contentTypes['findCourse'][0])
    {
        list($response) = $this->findCourseWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation findCourseWithHttpInfo
     *
     * Find a Course by $sys.id
     *
     * @param  string $id $sys.id of the Course to find (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findCourse'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kimono\Model\Course, HTTP status code, HTTP response headers (array of strings)
     */
    public function findCourseWithHttpInfo($id, string $contentType = self::contentTypes['findCourse'][0])
    {
        $request = $this->findCourseRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Kimono\Model\Course' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Kimono\Model\Course' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Kimono\Model\Course', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Kimono\Model\Course';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kimono\Model\Course',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findCourseAsync
     *
     * Find a Course by $sys.id
     *
     * @param  string $id $sys.id of the Course to find (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findCourse'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findCourseAsync($id, string $contentType = self::contentTypes['findCourse'][0])
    {
        return $this->findCourseAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findCourseAsyncWithHttpInfo
     *
     * Find a Course by $sys.id
     *
     * @param  string $id $sys.id of the Course to find (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findCourse'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findCourseAsyncWithHttpInfo($id, string $contentType = self::contentTypes['findCourse'][0])
    {
        $returnType = '\Kimono\Model\Course';
        $request = $this->findCourseRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findCourse'
     *
     * @param  string $id $sys.id of the Course to find (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findCourse'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findCourseRequest($id, string $contentType = self::contentTypes['findCourse'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling findCourse'
            );
        }


        $resourcePath = '/rostering/courses/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findLEA
     *
     * Find an LEA-type Org by $sys.id
     *
     * @param  string $id $sys.id of the LEA (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findLEA'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kimono\Model\Org
     */
    public function findLEA($id, string $contentType = self::contentTypes['findLEA'][0])
    {
        list($response) = $this->findLEAWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation findLEAWithHttpInfo
     *
     * Find an LEA-type Org by $sys.id
     *
     * @param  string $id $sys.id of the LEA (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findLEA'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kimono\Model\Org, HTTP status code, HTTP response headers (array of strings)
     */
    public function findLEAWithHttpInfo($id, string $contentType = self::contentTypes['findLEA'][0])
    {
        $request = $this->findLEARequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Kimono\Model\Org' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Kimono\Model\Org' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Kimono\Model\Org', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Kimono\Model\Org';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kimono\Model\Org',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findLEAAsync
     *
     * Find an LEA-type Org by $sys.id
     *
     * @param  string $id $sys.id of the LEA (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findLEA'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findLEAAsync($id, string $contentType = self::contentTypes['findLEA'][0])
    {
        return $this->findLEAAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findLEAAsyncWithHttpInfo
     *
     * Find an LEA-type Org by $sys.id
     *
     * @param  string $id $sys.id of the LEA (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findLEA'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findLEAAsyncWithHttpInfo($id, string $contentType = self::contentTypes['findLEA'][0])
    {
        $returnType = '\Kimono\Model\Org';
        $request = $this->findLEARequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findLEA'
     *
     * @param  string $id $sys.id of the LEA (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findLEA'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findLEARequest($id, string $contentType = self::contentTypes['findLEA'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling findLEA'
            );
        }


        $resourcePath = '/rostering/leas/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findOrg
     *
     * Find an Org by $sys.id
     *
     * @param  string $id $sys.id of the object (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findOrg'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kimono\Model\OrgResponse
     */
    public function findOrg($id, string $contentType = self::contentTypes['findOrg'][0])
    {
        list($response) = $this->findOrgWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation findOrgWithHttpInfo
     *
     * Find an Org by $sys.id
     *
     * @param  string $id $sys.id of the object (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findOrg'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kimono\Model\OrgResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function findOrgWithHttpInfo($id, string $contentType = self::contentTypes['findOrg'][0])
    {
        $request = $this->findOrgRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Kimono\Model\OrgResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Kimono\Model\OrgResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Kimono\Model\OrgResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Kimono\Model\OrgResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kimono\Model\OrgResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findOrgAsync
     *
     * Find an Org by $sys.id
     *
     * @param  string $id $sys.id of the object (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findOrg'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findOrgAsync($id, string $contentType = self::contentTypes['findOrg'][0])
    {
        return $this->findOrgAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findOrgAsyncWithHttpInfo
     *
     * Find an Org by $sys.id
     *
     * @param  string $id $sys.id of the object (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findOrg'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findOrgAsyncWithHttpInfo($id, string $contentType = self::contentTypes['findOrg'][0])
    {
        $returnType = '\Kimono\Model\OrgResponse';
        $request = $this->findOrgRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findOrg'
     *
     * @param  string $id $sys.id of the object (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findOrg'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findOrgRequest($id, string $contentType = self::contentTypes['findOrg'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling findOrg'
            );
        }


        $resourcePath = '/rostering/orgs/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findPerson
     *
     * Find a Person by $sys.id
     *
     * @param  string $id $sys.id of the Person to find (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findPerson'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kimono\Model\Person
     */
    public function findPerson($id, string $contentType = self::contentTypes['findPerson'][0])
    {
        list($response) = $this->findPersonWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation findPersonWithHttpInfo
     *
     * Find a Person by $sys.id
     *
     * @param  string $id $sys.id of the Person to find (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findPerson'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kimono\Model\Person, HTTP status code, HTTP response headers (array of strings)
     */
    public function findPersonWithHttpInfo($id, string $contentType = self::contentTypes['findPerson'][0])
    {
        $request = $this->findPersonRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Kimono\Model\Person' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Kimono\Model\Person' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Kimono\Model\Person', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Kimono\Model\Person';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kimono\Model\Person',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findPersonAsync
     *
     * Find a Person by $sys.id
     *
     * @param  string $id $sys.id of the Person to find (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findPerson'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findPersonAsync($id, string $contentType = self::contentTypes['findPerson'][0])
    {
        return $this->findPersonAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findPersonAsyncWithHttpInfo
     *
     * Find a Person by $sys.id
     *
     * @param  string $id $sys.id of the Person to find (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findPerson'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findPersonAsyncWithHttpInfo($id, string $contentType = self::contentTypes['findPerson'][0])
    {
        $returnType = '\Kimono\Model\Person';
        $request = $this->findPersonRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findPerson'
     *
     * @param  string $id $sys.id of the Person to find (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findPerson'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findPersonRequest($id, string $contentType = self::contentTypes['findPerson'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling findPerson'
            );
        }


        $resourcePath = '/rostering/persons/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findSection
     *
     * Find a Section by $sys.id
     *
     * @param  string $id $sys.id of the Section to find (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findSection'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kimono\Model\Section
     */
    public function findSection($id, string $contentType = self::contentTypes['findSection'][0])
    {
        list($response) = $this->findSectionWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation findSectionWithHttpInfo
     *
     * Find a Section by $sys.id
     *
     * @param  string $id $sys.id of the Section to find (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findSection'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kimono\Model\Section, HTTP status code, HTTP response headers (array of strings)
     */
    public function findSectionWithHttpInfo($id, string $contentType = self::contentTypes['findSection'][0])
    {
        $request = $this->findSectionRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Kimono\Model\Section' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Kimono\Model\Section' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Kimono\Model\Section', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Kimono\Model\Section';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kimono\Model\Section',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findSectionAsync
     *
     * Find a Section by $sys.id
     *
     * @param  string $id $sys.id of the Section to find (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findSection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findSectionAsync($id, string $contentType = self::contentTypes['findSection'][0])
    {
        return $this->findSectionAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findSectionAsyncWithHttpInfo
     *
     * Find a Section by $sys.id
     *
     * @param  string $id $sys.id of the Section to find (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findSection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findSectionAsyncWithHttpInfo($id, string $contentType = self::contentTypes['findSection'][0])
    {
        $returnType = '\Kimono\Model\Section';
        $request = $this->findSectionRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findSection'
     *
     * @param  string $id $sys.id of the Section to find (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findSection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findSectionRequest($id, string $contentType = self::contentTypes['findSection'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling findSection'
            );
        }


        $resourcePath = '/rostering/sections/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findTerm
     *
     * Find a Term by $sys.id
     *
     * @param  string $id $sys.id of the Term to find (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findTerm'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kimono\Model\Term
     */
    public function findTerm($id, string $contentType = self::contentTypes['findTerm'][0])
    {
        list($response) = $this->findTermWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation findTermWithHttpInfo
     *
     * Find a Term by $sys.id
     *
     * @param  string $id $sys.id of the Term to find (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findTerm'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kimono\Model\Term, HTTP status code, HTTP response headers (array of strings)
     */
    public function findTermWithHttpInfo($id, string $contentType = self::contentTypes['findTerm'][0])
    {
        $request = $this->findTermRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Kimono\Model\Term' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Kimono\Model\Term' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Kimono\Model\Term', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Kimono\Model\Term';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kimono\Model\Term',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findTermAsync
     *
     * Find a Term by $sys.id
     *
     * @param  string $id $sys.id of the Term to find (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findTerm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findTermAsync($id, string $contentType = self::contentTypes['findTerm'][0])
    {
        return $this->findTermAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findTermAsyncWithHttpInfo
     *
     * Find a Term by $sys.id
     *
     * @param  string $id $sys.id of the Term to find (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findTerm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findTermAsyncWithHttpInfo($id, string $contentType = self::contentTypes['findTerm'][0])
    {
        $returnType = '\Kimono\Model\Term';
        $request = $this->findTermRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findTerm'
     *
     * @param  string $id $sys.id of the Term to find (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findTerm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findTermRequest($id, string $contentType = self::contentTypes['findTerm'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling findTerm'
            );
        }


        $resourcePath = '/rostering/terms/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listCourses
     *
     * List all Courses
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCourses'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kimono\Model\CoursesResponse
     */
    public function listCourses($page = null, $page_size = null, string $contentType = self::contentTypes['listCourses'][0])
    {
        list($response) = $this->listCoursesWithHttpInfo($page, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation listCoursesWithHttpInfo
     *
     * List all Courses
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCourses'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kimono\Model\CoursesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listCoursesWithHttpInfo($page = null, $page_size = null, string $contentType = self::contentTypes['listCourses'][0])
    {
        $request = $this->listCoursesRequest($page, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Kimono\Model\CoursesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Kimono\Model\CoursesResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Kimono\Model\CoursesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Kimono\Model\CoursesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kimono\Model\CoursesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listCoursesAsync
     *
     * List all Courses
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCoursesAsync($page = null, $page_size = null, string $contentType = self::contentTypes['listCourses'][0])
    {
        return $this->listCoursesAsyncWithHttpInfo($page, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listCoursesAsyncWithHttpInfo
     *
     * List all Courses
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCoursesAsyncWithHttpInfo($page = null, $page_size = null, string $contentType = self::contentTypes['listCourses'][0])
    {
        $returnType = '\Kimono\Model\CoursesResponse';
        $request = $this->listCoursesRequest($page, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listCourses'
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCourses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listCoursesRequest($page = null, $page_size = null, string $contentType = self::contentTypes['listCourses'][0])
    {




        $resourcePath = '/rostering/courses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listCoursesForOrg
     *
     * List Courses that belong to an Org
     *
     * @param  string $id $sys.id of the Org (required)
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCoursesForOrg'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kimono\Model\CoursesResponse
     */
    public function listCoursesForOrg($id, $page = null, $page_size = null, string $contentType = self::contentTypes['listCoursesForOrg'][0])
    {
        list($response) = $this->listCoursesForOrgWithHttpInfo($id, $page, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation listCoursesForOrgWithHttpInfo
     *
     * List Courses that belong to an Org
     *
     * @param  string $id $sys.id of the Org (required)
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCoursesForOrg'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kimono\Model\CoursesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listCoursesForOrgWithHttpInfo($id, $page = null, $page_size = null, string $contentType = self::contentTypes['listCoursesForOrg'][0])
    {
        $request = $this->listCoursesForOrgRequest($id, $page, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Kimono\Model\CoursesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Kimono\Model\CoursesResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Kimono\Model\CoursesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Kimono\Model\CoursesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kimono\Model\CoursesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listCoursesForOrgAsync
     *
     * List Courses that belong to an Org
     *
     * @param  string $id $sys.id of the Org (required)
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCoursesForOrg'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCoursesForOrgAsync($id, $page = null, $page_size = null, string $contentType = self::contentTypes['listCoursesForOrg'][0])
    {
        return $this->listCoursesForOrgAsyncWithHttpInfo($id, $page, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listCoursesForOrgAsyncWithHttpInfo
     *
     * List Courses that belong to an Org
     *
     * @param  string $id $sys.id of the Org (required)
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCoursesForOrg'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCoursesForOrgAsyncWithHttpInfo($id, $page = null, $page_size = null, string $contentType = self::contentTypes['listCoursesForOrg'][0])
    {
        $returnType = '\Kimono\Model\CoursesResponse';
        $request = $this->listCoursesForOrgRequest($id, $page, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listCoursesForOrg'
     *
     * @param  string $id $sys.id of the Org (required)
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCoursesForOrg'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listCoursesForOrgRequest($id, $page = null, $page_size = null, string $contentType = self::contentTypes['listCoursesForOrg'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling listCoursesForOrg'
            );
        }




        $resourcePath = '/rostering/orgs/{id}/courses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listLEAs
     *
     * List all LEA-type Orgs
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLEAs'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kimono\Model\OrgsResponse
     */
    public function listLEAs($page = null, $page_size = null, string $contentType = self::contentTypes['listLEAs'][0])
    {
        list($response) = $this->listLEAsWithHttpInfo($page, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation listLEAsWithHttpInfo
     *
     * List all LEA-type Orgs
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLEAs'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kimono\Model\OrgsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listLEAsWithHttpInfo($page = null, $page_size = null, string $contentType = self::contentTypes['listLEAs'][0])
    {
        $request = $this->listLEAsRequest($page, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Kimono\Model\OrgsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Kimono\Model\OrgsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Kimono\Model\OrgsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Kimono\Model\OrgsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kimono\Model\OrgsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listLEAsAsync
     *
     * List all LEA-type Orgs
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLEAs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listLEAsAsync($page = null, $page_size = null, string $contentType = self::contentTypes['listLEAs'][0])
    {
        return $this->listLEAsAsyncWithHttpInfo($page, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listLEAsAsyncWithHttpInfo
     *
     * List all LEA-type Orgs
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLEAs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listLEAsAsyncWithHttpInfo($page = null, $page_size = null, string $contentType = self::contentTypes['listLEAs'][0])
    {
        $returnType = '\Kimono\Model\OrgsResponse';
        $request = $this->listLEAsRequest($page, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listLEAs'
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLEAs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listLEAsRequest($page = null, $page_size = null, string $contentType = self::contentTypes['listLEAs'][0])
    {




        $resourcePath = '/rostering/leas';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listOrgs
     *
     * List all Orgs
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listOrgs'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kimono\Model\OrgsResponse
     */
    public function listOrgs($page = null, $page_size = null, string $contentType = self::contentTypes['listOrgs'][0])
    {
        list($response) = $this->listOrgsWithHttpInfo($page, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation listOrgsWithHttpInfo
     *
     * List all Orgs
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listOrgs'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kimono\Model\OrgsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listOrgsWithHttpInfo($page = null, $page_size = null, string $contentType = self::contentTypes['listOrgs'][0])
    {
        $request = $this->listOrgsRequest($page, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Kimono\Model\OrgsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Kimono\Model\OrgsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Kimono\Model\OrgsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Kimono\Model\OrgsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kimono\Model\OrgsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listOrgsAsync
     *
     * List all Orgs
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listOrgs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listOrgsAsync($page = null, $page_size = null, string $contentType = self::contentTypes['listOrgs'][0])
    {
        return $this->listOrgsAsyncWithHttpInfo($page, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listOrgsAsyncWithHttpInfo
     *
     * List all Orgs
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listOrgs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listOrgsAsyncWithHttpInfo($page = null, $page_size = null, string $contentType = self::contentTypes['listOrgs'][0])
    {
        $returnType = '\Kimono\Model\OrgsResponse';
        $request = $this->listOrgsRequest($page, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listOrgs'
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listOrgs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listOrgsRequest($page = null, $page_size = null, string $contentType = self::contentTypes['listOrgs'][0])
    {




        $resourcePath = '/rostering/orgs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPersons
     *
     * Get all Persons
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPersons'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kimono\Model\PersonsResponse
     */
    public function listPersons($page = null, $page_size = null, string $contentType = self::contentTypes['listPersons'][0])
    {
        list($response) = $this->listPersonsWithHttpInfo($page, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation listPersonsWithHttpInfo
     *
     * Get all Persons
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPersons'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kimono\Model\PersonsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPersonsWithHttpInfo($page = null, $page_size = null, string $contentType = self::contentTypes['listPersons'][0])
    {
        $request = $this->listPersonsRequest($page, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Kimono\Model\PersonsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Kimono\Model\PersonsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Kimono\Model\PersonsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Kimono\Model\PersonsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kimono\Model\PersonsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPersonsAsync
     *
     * Get all Persons
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPersons'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPersonsAsync($page = null, $page_size = null, string $contentType = self::contentTypes['listPersons'][0])
    {
        return $this->listPersonsAsyncWithHttpInfo($page, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPersonsAsyncWithHttpInfo
     *
     * Get all Persons
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPersons'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPersonsAsyncWithHttpInfo($page = null, $page_size = null, string $contentType = self::contentTypes['listPersons'][0])
    {
        $returnType = '\Kimono\Model\PersonsResponse';
        $request = $this->listPersonsRequest($page, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPersons'
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPersons'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listPersonsRequest($page = null, $page_size = null, string $contentType = self::contentTypes['listPersons'][0])
    {




        $resourcePath = '/rostering/persons';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listSchools
     *
     * List all School-type Orgs
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSchools'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kimono\Model\OrgsResponse
     */
    public function listSchools($page = null, $page_size = null, string $contentType = self::contentTypes['listSchools'][0])
    {
        list($response) = $this->listSchoolsWithHttpInfo($page, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation listSchoolsWithHttpInfo
     *
     * List all School-type Orgs
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSchools'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kimono\Model\OrgsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listSchoolsWithHttpInfo($page = null, $page_size = null, string $contentType = self::contentTypes['listSchools'][0])
    {
        $request = $this->listSchoolsRequest($page, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Kimono\Model\OrgsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Kimono\Model\OrgsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Kimono\Model\OrgsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Kimono\Model\OrgsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kimono\Model\OrgsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listSchoolsAsync
     *
     * List all School-type Orgs
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSchools'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSchoolsAsync($page = null, $page_size = null, string $contentType = self::contentTypes['listSchools'][0])
    {
        return $this->listSchoolsAsyncWithHttpInfo($page, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listSchoolsAsyncWithHttpInfo
     *
     * List all School-type Orgs
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSchools'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSchoolsAsyncWithHttpInfo($page = null, $page_size = null, string $contentType = self::contentTypes['listSchools'][0])
    {
        $returnType = '\Kimono\Model\OrgsResponse';
        $request = $this->listSchoolsRequest($page, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listSchools'
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSchools'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listSchoolsRequest($page = null, $page_size = null, string $contentType = self::contentTypes['listSchools'][0])
    {




        $resourcePath = '/rostering/schools';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listSections
     *
     * List all Sections
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSections'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kimono\Model\SectionsResponse
     */
    public function listSections($page = null, $page_size = null, string $contentType = self::contentTypes['listSections'][0])
    {
        list($response) = $this->listSectionsWithHttpInfo($page, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation listSectionsWithHttpInfo
     *
     * List all Sections
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSections'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kimono\Model\SectionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listSectionsWithHttpInfo($page = null, $page_size = null, string $contentType = self::contentTypes['listSections'][0])
    {
        $request = $this->listSectionsRequest($page, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Kimono\Model\SectionsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Kimono\Model\SectionsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Kimono\Model\SectionsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Kimono\Model\SectionsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kimono\Model\SectionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listSectionsAsync
     *
     * List all Sections
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSections'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSectionsAsync($page = null, $page_size = null, string $contentType = self::contentTypes['listSections'][0])
    {
        return $this->listSectionsAsyncWithHttpInfo($page, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listSectionsAsyncWithHttpInfo
     *
     * List all Sections
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSections'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSectionsAsyncWithHttpInfo($page = null, $page_size = null, string $contentType = self::contentTypes['listSections'][0])
    {
        $returnType = '\Kimono\Model\SectionsResponse';
        $request = $this->listSectionsRequest($page, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listSections'
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSections'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listSectionsRequest($page = null, $page_size = null, string $contentType = self::contentTypes['listSections'][0])
    {




        $resourcePath = '/rostering/sections';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listSectionsForOrg
     *
     * List Sections that belong to an Org
     *
     * @param  string $id $sys.id of the Org (required)
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSectionsForOrg'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kimono\Model\SectionsResponse
     */
    public function listSectionsForOrg($id, $page = null, $page_size = null, string $contentType = self::contentTypes['listSectionsForOrg'][0])
    {
        list($response) = $this->listSectionsForOrgWithHttpInfo($id, $page, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation listSectionsForOrgWithHttpInfo
     *
     * List Sections that belong to an Org
     *
     * @param  string $id $sys.id of the Org (required)
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSectionsForOrg'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kimono\Model\SectionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listSectionsForOrgWithHttpInfo($id, $page = null, $page_size = null, string $contentType = self::contentTypes['listSectionsForOrg'][0])
    {
        $request = $this->listSectionsForOrgRequest($id, $page, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Kimono\Model\SectionsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Kimono\Model\SectionsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Kimono\Model\SectionsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Kimono\Model\SectionsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kimono\Model\SectionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listSectionsForOrgAsync
     *
     * List Sections that belong to an Org
     *
     * @param  string $id $sys.id of the Org (required)
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSectionsForOrg'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSectionsForOrgAsync($id, $page = null, $page_size = null, string $contentType = self::contentTypes['listSectionsForOrg'][0])
    {
        return $this->listSectionsForOrgAsyncWithHttpInfo($id, $page, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listSectionsForOrgAsyncWithHttpInfo
     *
     * List Sections that belong to an Org
     *
     * @param  string $id $sys.id of the Org (required)
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSectionsForOrg'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSectionsForOrgAsyncWithHttpInfo($id, $page = null, $page_size = null, string $contentType = self::contentTypes['listSectionsForOrg'][0])
    {
        $returnType = '\Kimono\Model\SectionsResponse';
        $request = $this->listSectionsForOrgRequest($id, $page, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listSectionsForOrg'
     *
     * @param  string $id $sys.id of the Org (required)
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSectionsForOrg'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listSectionsForOrgRequest($id, $page = null, $page_size = null, string $contentType = self::contentTypes['listSectionsForOrg'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling listSectionsForOrg'
            );
        }




        $resourcePath = '/rostering/orgs/{id}/sections';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listStudents
     *
     * List all Student-type Persons
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listStudents'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kimono\Model\PersonsResponse
     */
    public function listStudents($page = null, $page_size = null, string $contentType = self::contentTypes['listStudents'][0])
    {
        list($response) = $this->listStudentsWithHttpInfo($page, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation listStudentsWithHttpInfo
     *
     * List all Student-type Persons
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listStudents'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kimono\Model\PersonsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listStudentsWithHttpInfo($page = null, $page_size = null, string $contentType = self::contentTypes['listStudents'][0])
    {
        $request = $this->listStudentsRequest($page, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Kimono\Model\PersonsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Kimono\Model\PersonsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Kimono\Model\PersonsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Kimono\Model\PersonsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kimono\Model\PersonsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listStudentsAsync
     *
     * List all Student-type Persons
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listStudents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listStudentsAsync($page = null, $page_size = null, string $contentType = self::contentTypes['listStudents'][0])
    {
        return $this->listStudentsAsyncWithHttpInfo($page, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listStudentsAsyncWithHttpInfo
     *
     * List all Student-type Persons
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listStudents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listStudentsAsyncWithHttpInfo($page = null, $page_size = null, string $contentType = self::contentTypes['listStudents'][0])
    {
        $returnType = '\Kimono\Model\PersonsResponse';
        $request = $this->listStudentsRequest($page, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listStudents'
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listStudents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listStudentsRequest($page = null, $page_size = null, string $contentType = self::contentTypes['listStudents'][0])
    {




        $resourcePath = '/rostering/students';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listStudentsForOrg
     *
     * List Students that are members of an Org
     *
     * @param  string $id $sys.id of the Org (required)
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listStudentsForOrg'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kimono\Model\PersonsResponse
     */
    public function listStudentsForOrg($id, $page = null, $page_size = null, string $contentType = self::contentTypes['listStudentsForOrg'][0])
    {
        list($response) = $this->listStudentsForOrgWithHttpInfo($id, $page, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation listStudentsForOrgWithHttpInfo
     *
     * List Students that are members of an Org
     *
     * @param  string $id $sys.id of the Org (required)
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listStudentsForOrg'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kimono\Model\PersonsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listStudentsForOrgWithHttpInfo($id, $page = null, $page_size = null, string $contentType = self::contentTypes['listStudentsForOrg'][0])
    {
        $request = $this->listStudentsForOrgRequest($id, $page, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Kimono\Model\PersonsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Kimono\Model\PersonsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Kimono\Model\PersonsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Kimono\Model\PersonsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kimono\Model\PersonsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listStudentsForOrgAsync
     *
     * List Students that are members of an Org
     *
     * @param  string $id $sys.id of the Org (required)
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listStudentsForOrg'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listStudentsForOrgAsync($id, $page = null, $page_size = null, string $contentType = self::contentTypes['listStudentsForOrg'][0])
    {
        return $this->listStudentsForOrgAsyncWithHttpInfo($id, $page, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listStudentsForOrgAsyncWithHttpInfo
     *
     * List Students that are members of an Org
     *
     * @param  string $id $sys.id of the Org (required)
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listStudentsForOrg'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listStudentsForOrgAsyncWithHttpInfo($id, $page = null, $page_size = null, string $contentType = self::contentTypes['listStudentsForOrg'][0])
    {
        $returnType = '\Kimono\Model\PersonsResponse';
        $request = $this->listStudentsForOrgRequest($id, $page, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listStudentsForOrg'
     *
     * @param  string $id $sys.id of the Org (required)
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listStudentsForOrg'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listStudentsForOrgRequest($id, $page = null, $page_size = null, string $contentType = self::contentTypes['listStudentsForOrg'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling listStudentsForOrg'
            );
        }




        $resourcePath = '/rostering/orgs/{id}/students';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listTeachers
     *
     * List all Teacher-type Persons
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTeachers'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kimono\Model\PersonsResponse
     */
    public function listTeachers($page = null, $page_size = null, string $contentType = self::contentTypes['listTeachers'][0])
    {
        list($response) = $this->listTeachersWithHttpInfo($page, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation listTeachersWithHttpInfo
     *
     * List all Teacher-type Persons
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTeachers'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kimono\Model\PersonsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listTeachersWithHttpInfo($page = null, $page_size = null, string $contentType = self::contentTypes['listTeachers'][0])
    {
        $request = $this->listTeachersRequest($page, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Kimono\Model\PersonsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Kimono\Model\PersonsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Kimono\Model\PersonsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Kimono\Model\PersonsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kimono\Model\PersonsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listTeachersAsync
     *
     * List all Teacher-type Persons
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTeachers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTeachersAsync($page = null, $page_size = null, string $contentType = self::contentTypes['listTeachers'][0])
    {
        return $this->listTeachersAsyncWithHttpInfo($page, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listTeachersAsyncWithHttpInfo
     *
     * List all Teacher-type Persons
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTeachers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTeachersAsyncWithHttpInfo($page = null, $page_size = null, string $contentType = self::contentTypes['listTeachers'][0])
    {
        $returnType = '\Kimono\Model\PersonsResponse';
        $request = $this->listTeachersRequest($page, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listTeachers'
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTeachers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listTeachersRequest($page = null, $page_size = null, string $contentType = self::contentTypes['listTeachers'][0])
    {




        $resourcePath = '/rostering/teachers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listTeachersForOrg
     *
     * List Teachers that are members of an Org
     *
     * @param  string $id $sys.id of the Org (required)
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTeachersForOrg'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kimono\Model\PersonsResponse
     */
    public function listTeachersForOrg($id, $page = null, $page_size = null, string $contentType = self::contentTypes['listTeachersForOrg'][0])
    {
        list($response) = $this->listTeachersForOrgWithHttpInfo($id, $page, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation listTeachersForOrgWithHttpInfo
     *
     * List Teachers that are members of an Org
     *
     * @param  string $id $sys.id of the Org (required)
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTeachersForOrg'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kimono\Model\PersonsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listTeachersForOrgWithHttpInfo($id, $page = null, $page_size = null, string $contentType = self::contentTypes['listTeachersForOrg'][0])
    {
        $request = $this->listTeachersForOrgRequest($id, $page, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Kimono\Model\PersonsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Kimono\Model\PersonsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Kimono\Model\PersonsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Kimono\Model\PersonsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kimono\Model\PersonsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listTeachersForOrgAsync
     *
     * List Teachers that are members of an Org
     *
     * @param  string $id $sys.id of the Org (required)
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTeachersForOrg'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTeachersForOrgAsync($id, $page = null, $page_size = null, string $contentType = self::contentTypes['listTeachersForOrg'][0])
    {
        return $this->listTeachersForOrgAsyncWithHttpInfo($id, $page, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listTeachersForOrgAsyncWithHttpInfo
     *
     * List Teachers that are members of an Org
     *
     * @param  string $id $sys.id of the Org (required)
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTeachersForOrg'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTeachersForOrgAsyncWithHttpInfo($id, $page = null, $page_size = null, string $contentType = self::contentTypes['listTeachersForOrg'][0])
    {
        $returnType = '\Kimono\Model\PersonsResponse';
        $request = $this->listTeachersForOrgRequest($id, $page, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listTeachersForOrg'
     *
     * @param  string $id $sys.id of the Org (required)
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTeachersForOrg'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listTeachersForOrgRequest($id, $page = null, $page_size = null, string $contentType = self::contentTypes['listTeachersForOrg'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling listTeachersForOrg'
            );
        }




        $resourcePath = '/rostering/orgs/{id}/teachers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listTerms
     *
     * List all Terms
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTerms'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kimono\Model\TermsResponse
     */
    public function listTerms($page = null, $page_size = null, string $contentType = self::contentTypes['listTerms'][0])
    {
        list($response) = $this->listTermsWithHttpInfo($page, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation listTermsWithHttpInfo
     *
     * List all Terms
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTerms'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kimono\Model\TermsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listTermsWithHttpInfo($page = null, $page_size = null, string $contentType = self::contentTypes['listTerms'][0])
    {
        $request = $this->listTermsRequest($page, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Kimono\Model\TermsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Kimono\Model\TermsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Kimono\Model\TermsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Kimono\Model\TermsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kimono\Model\TermsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listTermsAsync
     *
     * List all Terms
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTerms'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTermsAsync($page = null, $page_size = null, string $contentType = self::contentTypes['listTerms'][0])
    {
        return $this->listTermsAsyncWithHttpInfo($page, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listTermsAsyncWithHttpInfo
     *
     * List all Terms
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTerms'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTermsAsyncWithHttpInfo($page = null, $page_size = null, string $contentType = self::contentTypes['listTerms'][0])
    {
        $returnType = '\Kimono\Model\TermsResponse';
        $request = $this->listTermsRequest($page, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listTerms'
     *
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTerms'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listTermsRequest($page = null, $page_size = null, string $contentType = self::contentTypes['listTerms'][0])
    {




        $resourcePath = '/rostering/terms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listTermsForOrg
     *
     * List Terms that belong to an Org
     *
     * @param  string $id $sys.id of the Org (required)
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTermsForOrg'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kimono\Model\TermsResponse
     */
    public function listTermsForOrg($id, $page = null, $page_size = null, string $contentType = self::contentTypes['listTermsForOrg'][0])
    {
        list($response) = $this->listTermsForOrgWithHttpInfo($id, $page, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation listTermsForOrgWithHttpInfo
     *
     * List Terms that belong to an Org
     *
     * @param  string $id $sys.id of the Org (required)
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTermsForOrg'] to see the possible values for this operation
     *
     * @throws \Kimono\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kimono\Model\TermsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listTermsForOrgWithHttpInfo($id, $page = null, $page_size = null, string $contentType = self::contentTypes['listTermsForOrg'][0])
    {
        $request = $this->listTermsForOrgRequest($id, $page, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Kimono\Model\TermsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Kimono\Model\TermsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Kimono\Model\TermsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Kimono\Model\TermsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kimono\Model\TermsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listTermsForOrgAsync
     *
     * List Terms that belong to an Org
     *
     * @param  string $id $sys.id of the Org (required)
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTermsForOrg'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTermsForOrgAsync($id, $page = null, $page_size = null, string $contentType = self::contentTypes['listTermsForOrg'][0])
    {
        return $this->listTermsForOrgAsyncWithHttpInfo($id, $page, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listTermsForOrgAsyncWithHttpInfo
     *
     * List Terms that belong to an Org
     *
     * @param  string $id $sys.id of the Org (required)
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTermsForOrg'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTermsForOrgAsyncWithHttpInfo($id, $page = null, $page_size = null, string $contentType = self::contentTypes['listTermsForOrg'][0])
    {
        $returnType = '\Kimono\Model\TermsResponse';
        $request = $this->listTermsForOrgRequest($id, $page, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listTermsForOrg'
     *
     * @param  string $id $sys.id of the Org (required)
     * @param  int $page Specify the page number (defaults to 0) (optional)
     * @param  int $page_size Specify the page_size (defaults to the maximum page size) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTermsForOrg'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listTermsForOrgRequest($id, $page = null, $page_size = null, string $contentType = self::contentTypes['listTermsForOrg'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling listTermsForOrg'
            );
        }




        $resourcePath = '/rostering/orgs/{id}/terms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
