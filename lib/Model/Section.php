<?php
/**
 * Section
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Kimono
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Interop Data API
 *
 * Interop Data APIs provide access to the data objects and events from Interop Cloud repositories and Integration repositories
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Kimono\Model;

use \ArrayAccess;
use \Kimono\ObjectSerializer;

/**
 * Section Class Doc Comment
 *
 * @category Class
 * @package  Kimono
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Section implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Section';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ext' => 'array<string,object>',
        'sys' => '\Kimono\Model\SysType',
        'local_id' => 'string',
        'title' => 'string',
        'description' => 'string',
        'terms' => '\Kimono\Model\TermRefType[]',
        'course' => '\Kimono\Model\RefType',
        'org' => '\Kimono\Model\OrgRefType',
        'teachers' => '\Kimono\Model\PersonMembershipRefType[]',
        'students' => '\Kimono\Model\PersonMembershipRefType[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ext' => null,
        'sys' => null,
        'local_id' => null,
        'title' => null,
        'description' => null,
        'terms' => null,
        'course' => null,
        'org' => null,
        'teachers' => null,
        'students' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ext' => false,
		'sys' => false,
		'local_id' => false,
		'title' => false,
		'description' => false,
		'terms' => false,
		'course' => false,
		'org' => false,
		'teachers' => false,
		'students' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ext' => '$ext',
        'sys' => '$sys',
        'local_id' => 'local_id',
        'title' => 'title',
        'description' => 'description',
        'terms' => '$terms',
        'course' => '$course',
        'org' => '$org',
        'teachers' => '$teachers',
        'students' => '$students'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ext' => 'setExt',
        'sys' => 'setSys',
        'local_id' => 'setLocalId',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'terms' => 'setTerms',
        'course' => 'setCourse',
        'org' => 'setOrg',
        'teachers' => 'setTeachers',
        'students' => 'setStudents'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ext' => 'getExt',
        'sys' => 'getSys',
        'local_id' => 'getLocalId',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'terms' => 'getTerms',
        'course' => 'getCourse',
        'org' => 'getOrg',
        'teachers' => 'getTeachers',
        'students' => 'getStudents'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('ext', $data ?? [], null);
        $this->setIfExists('sys', $data ?? [], null);
        $this->setIfExists('local_id', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('terms', $data ?? [], null);
        $this->setIfExists('course', $data ?? [], null);
        $this->setIfExists('org', $data ?? [], null);
        $this->setIfExists('teachers', $data ?? [], null);
        $this->setIfExists('students', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ext
     *
     * @return array<string,object>|null
     */
    public function getExt()
    {
        return $this->container['ext'];
    }

    /**
     * Sets ext
     *
     * @param array<string,object>|null $ext ext
     *
     * @return self
     */
    public function setExt($ext)
    {
        if (is_null($ext)) {
            throw new \InvalidArgumentException('non-nullable ext cannot be null');
        }
        $this->container['ext'] = $ext;

        return $this;
    }

    /**
     * Gets sys
     *
     * @return \Kimono\Model\SysType|null
     */
    public function getSys()
    {
        return $this->container['sys'];
    }

    /**
     * Sets sys
     *
     * @param \Kimono\Model\SysType|null $sys sys
     *
     * @return self
     */
    public function setSys($sys)
    {
        if (is_null($sys)) {
            throw new \InvalidArgumentException('non-nullable sys cannot be null');
        }
        $this->container['sys'] = $sys;

        return $this;
    }

    /**
     * Gets local_id
     *
     * @return string|null
     */
    public function getLocalId()
    {
        return $this->container['local_id'];
    }

    /**
     * Sets local_id
     *
     * @param string|null $local_id local_id
     *
     * @return self
     */
    public function setLocalId($local_id)
    {
        if (is_null($local_id)) {
            throw new \InvalidArgumentException('non-nullable local_id cannot be null');
        }
        $this->container['local_id'] = $local_id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets terms
     *
     * @return \Kimono\Model\TermRefType[]|null
     */
    public function getTerms()
    {
        return $this->container['terms'];
    }

    /**
     * Sets terms
     *
     * @param \Kimono\Model\TermRefType[]|null $terms terms
     *
     * @return self
     */
    public function setTerms($terms)
    {
        if (is_null($terms)) {
            throw new \InvalidArgumentException('non-nullable terms cannot be null');
        }
        $this->container['terms'] = $terms;

        return $this;
    }

    /**
     * Gets course
     *
     * @return \Kimono\Model\RefType|null
     */
    public function getCourse()
    {
        return $this->container['course'];
    }

    /**
     * Sets course
     *
     * @param \Kimono\Model\RefType|null $course course
     *
     * @return self
     */
    public function setCourse($course)
    {
        if (is_null($course)) {
            throw new \InvalidArgumentException('non-nullable course cannot be null');
        }
        $this->container['course'] = $course;

        return $this;
    }

    /**
     * Gets org
     *
     * @return \Kimono\Model\OrgRefType|null
     */
    public function getOrg()
    {
        return $this->container['org'];
    }

    /**
     * Sets org
     *
     * @param \Kimono\Model\OrgRefType|null $org org
     *
     * @return self
     */
    public function setOrg($org)
    {
        if (is_null($org)) {
            throw new \InvalidArgumentException('non-nullable org cannot be null');
        }
        $this->container['org'] = $org;

        return $this;
    }

    /**
     * Gets teachers
     *
     * @return \Kimono\Model\PersonMembershipRefType[]|null
     */
    public function getTeachers()
    {
        return $this->container['teachers'];
    }

    /**
     * Sets teachers
     *
     * @param \Kimono\Model\PersonMembershipRefType[]|null $teachers teachers
     *
     * @return self
     */
    public function setTeachers($teachers)
    {
        if (is_null($teachers)) {
            throw new \InvalidArgumentException('non-nullable teachers cannot be null');
        }
        $this->container['teachers'] = $teachers;

        return $this;
    }

    /**
     * Gets students
     *
     * @return \Kimono\Model\PersonMembershipRefType[]|null
     */
    public function getStudents()
    {
        return $this->container['students'];
    }

    /**
     * Sets students
     *
     * @param \Kimono\Model\PersonMembershipRefType[]|null $students students
     *
     * @return self
     */
    public function setStudents($students)
    {
        if (is_null($students)) {
            throw new \InvalidArgumentException('non-nullable students cannot be null');
        }
        $this->container['students'] = $students;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


