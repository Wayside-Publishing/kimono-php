<?php
/**
 * Person
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Kimono
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Interop Data API
 *
 * Interop Data APIs provide access to the data objects and events from Interop Cloud repositories and Integration repositories
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Kimono\Model;

use \ArrayAccess;
use \Kimono\ObjectSerializer;

/**
 * Person Class Doc Comment
 *
 * @category Class
 * @package  Kimono
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Person implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Person';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ext' => 'array<string,object>',
        'sys' => '\Kimono\Model\PersonSysType',
        'local_id' => 'string',
        'state_id' => 'string',
        'name' => '\Kimono\Model\NameType',
        'address' => '\Kimono\Model\AddressType',
        'phone' => 'string',
        'email' => 'string',
        'sex' => 'string',
        'dob' => '\DateTime',
        'aup' => 'bool',
        'grad_year' => 'string',
        'schools' => '\Kimono\Model\OrgMembershipRefType[]',
        'sections' => '\Kimono\Model\MembershipRefType[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ext' => null,
        'sys' => null,
        'local_id' => null,
        'state_id' => null,
        'name' => null,
        'address' => null,
        'phone' => null,
        'email' => 'email',
        'sex' => null,
        'dob' => 'date',
        'aup' => null,
        'grad_year' => null,
        'schools' => null,
        'sections' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ext' => false,
		'sys' => false,
		'local_id' => false,
		'state_id' => false,
		'name' => false,
		'address' => false,
		'phone' => false,
		'email' => false,
		'sex' => false,
		'dob' => false,
		'aup' => false,
		'grad_year' => false,
		'schools' => false,
		'sections' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ext' => '$ext',
        'sys' => '$sys',
        'local_id' => 'local_id',
        'state_id' => 'state_id',
        'name' => 'name',
        'address' => 'address',
        'phone' => 'phone',
        'email' => 'email',
        'sex' => 'sex',
        'dob' => 'dob',
        'aup' => 'aup',
        'grad_year' => 'grad_year',
        'schools' => '$schools',
        'sections' => '$sections'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ext' => 'setExt',
        'sys' => 'setSys',
        'local_id' => 'setLocalId',
        'state_id' => 'setStateId',
        'name' => 'setName',
        'address' => 'setAddress',
        'phone' => 'setPhone',
        'email' => 'setEmail',
        'sex' => 'setSex',
        'dob' => 'setDob',
        'aup' => 'setAup',
        'grad_year' => 'setGradYear',
        'schools' => 'setSchools',
        'sections' => 'setSections'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ext' => 'getExt',
        'sys' => 'getSys',
        'local_id' => 'getLocalId',
        'state_id' => 'getStateId',
        'name' => 'getName',
        'address' => 'getAddress',
        'phone' => 'getPhone',
        'email' => 'getEmail',
        'sex' => 'getSex',
        'dob' => 'getDob',
        'aup' => 'getAup',
        'grad_year' => 'getGradYear',
        'schools' => 'getSchools',
        'sections' => 'getSections'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('ext', $data ?? [], null);
        $this->setIfExists('sys', $data ?? [], null);
        $this->setIfExists('local_id', $data ?? [], null);
        $this->setIfExists('state_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('sex', $data ?? [], null);
        $this->setIfExists('dob', $data ?? [], null);
        $this->setIfExists('aup', $data ?? [], null);
        $this->setIfExists('grad_year', $data ?? [], null);
        $this->setIfExists('schools', $data ?? [], null);
        $this->setIfExists('sections', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sys'] === null) {
            $invalidProperties[] = "'sys' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ext
     *
     * @return array<string,object>|null
     */
    public function getExt()
    {
        return $this->container['ext'];
    }

    /**
     * Sets ext
     *
     * @param array<string,object>|null $ext ext
     *
     * @return self
     */
    public function setExt($ext)
    {
        if (is_null($ext)) {
            throw new \InvalidArgumentException('non-nullable ext cannot be null');
        }
        $this->container['ext'] = $ext;

        return $this;
    }

    /**
     * Gets sys
     *
     * @return \Kimono\Model\PersonSysType
     */
    public function getSys()
    {
        return $this->container['sys'];
    }

    /**
     * Sets sys
     *
     * @param \Kimono\Model\PersonSysType $sys sys
     *
     * @return self
     */
    public function setSys($sys)
    {
        if (is_null($sys)) {
            throw new \InvalidArgumentException('non-nullable sys cannot be null');
        }
        $this->container['sys'] = $sys;

        return $this;
    }

    /**
     * Gets local_id
     *
     * @return string|null
     */
    public function getLocalId()
    {
        return $this->container['local_id'];
    }

    /**
     * Sets local_id
     *
     * @param string|null $local_id local_id
     *
     * @return self
     */
    public function setLocalId($local_id)
    {
        if (is_null($local_id)) {
            throw new \InvalidArgumentException('non-nullable local_id cannot be null');
        }
        $this->container['local_id'] = $local_id;

        return $this;
    }

    /**
     * Gets state_id
     *
     * @return string|null
     */
    public function getStateId()
    {
        return $this->container['state_id'];
    }

    /**
     * Sets state_id
     *
     * @param string|null $state_id state_id
     *
     * @return self
     */
    public function setStateId($state_id)
    {
        if (is_null($state_id)) {
            throw new \InvalidArgumentException('non-nullable state_id cannot be null');
        }
        $this->container['state_id'] = $state_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return \Kimono\Model\NameType|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \Kimono\Model\NameType|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Kimono\Model\AddressType|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Kimono\Model\AddressType|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets sex
     *
     * @return string|null
     */
    public function getSex()
    {
        return $this->container['sex'];
    }

    /**
     * Sets sex
     *
     * @param string|null $sex sex
     *
     * @return self
     */
    public function setSex($sex)
    {
        if (is_null($sex)) {
            throw new \InvalidArgumentException('non-nullable sex cannot be null');
        }
        $this->container['sex'] = $sex;

        return $this;
    }

    /**
     * Gets dob
     *
     * @return \DateTime|null
     */
    public function getDob()
    {
        return $this->container['dob'];
    }

    /**
     * Sets dob
     *
     * @param \DateTime|null $dob dob
     *
     * @return self
     */
    public function setDob($dob)
    {
        if (is_null($dob)) {
            throw new \InvalidArgumentException('non-nullable dob cannot be null');
        }
        $this->container['dob'] = $dob;

        return $this;
    }

    /**
     * Gets aup
     *
     * @return bool|null
     */
    public function getAup()
    {
        return $this->container['aup'];
    }

    /**
     * Sets aup
     *
     * @param bool|null $aup aup
     *
     * @return self
     */
    public function setAup($aup)
    {
        if (is_null($aup)) {
            throw new \InvalidArgumentException('non-nullable aup cannot be null');
        }
        $this->container['aup'] = $aup;

        return $this;
    }

    /**
     * Gets grad_year
     *
     * @return string|null
     */
    public function getGradYear()
    {
        return $this->container['grad_year'];
    }

    /**
     * Sets grad_year
     *
     * @param string|null $grad_year grad_year
     *
     * @return self
     */
    public function setGradYear($grad_year)
    {
        if (is_null($grad_year)) {
            throw new \InvalidArgumentException('non-nullable grad_year cannot be null');
        }
        $this->container['grad_year'] = $grad_year;

        return $this;
    }

    /**
     * Gets schools
     *
     * @return \Kimono\Model\OrgMembershipRefType[]|null
     */
    public function getSchools()
    {
        return $this->container['schools'];
    }

    /**
     * Sets schools
     *
     * @param \Kimono\Model\OrgMembershipRefType[]|null $schools schools
     *
     * @return self
     */
    public function setSchools($schools)
    {
        if (is_null($schools)) {
            throw new \InvalidArgumentException('non-nullable schools cannot be null');
        }
        $this->container['schools'] = $schools;

        return $this;
    }

    /**
     * Gets sections
     *
     * @return \Kimono\Model\MembershipRefType[]|null
     */
    public function getSections()
    {
        return $this->container['sections'];
    }

    /**
     * Sets sections
     *
     * @param \Kimono\Model\MembershipRefType[]|null $sections sections
     *
     * @return self
     */
    public function setSections($sections)
    {
        if (is_null($sections)) {
            throw new \InvalidArgumentException('non-nullable sections cannot be null');
        }
        $this->container['sections'] = $sections;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


