<?php
/**
 * Person
 *
 * PHP version 5
 *
 * @category Class
 * @package  Kimono
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Interop Data API
 *
 * Interop Data APIs provide access to the data objects and events from Interop Cloud repositories and Integration repositories
 *
 * The version of the OpenAPI document: 2.0
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Kimono\Model;

use ArrayAccess;
use Kimono\ObjectSerializer;

/**
 * Person Class Doc Comment
 *
 * @category Class
 * @package  Kimono
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Person implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Person';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ext' => 'map[string,object]',
        'sys' => '\Kimono\Model\PersonSysType',
        'localId' => 'string',
        'stateId' => 'string',
        'name' => '\Kimono\Model\NameType',
        'address' => '\Kimono\Model\AddressType',
        'phone' => 'string',
        'email' => 'string',
        'sex' => 'string',
        'dob' => '\DateTime',
        'aup' => 'bool',
        'gradYear' => 'string',
        'schools' => '\Kimono\Model\OrgMembershipRefType[]',
        'sections' => '\Kimono\Model\MembershipRefType[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'ext' => null,
        'sys' => null,
        'localId' => null,
        'stateId' => null,
        'name' => null,
        'address' => null,
        'phone' => null,
        'email' => 'email',
        'sex' => null,
        'dob' => 'date',
        'aup' => null,
        'gradYear' => null,
        'schools' => null,
        'sections' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ext' => '$ext',
        'sys' => '$sys',
        'localId' => 'local_id',
        'stateId' => 'state_id',
        'name' => 'name',
        'address' => 'address',
        'phone' => 'phone',
        'email' => 'email',
        'sex' => 'sex',
        'dob' => 'dob',
        'aup' => 'aup',
        'gradYear' => 'grad_year',
        'schools' => '$schools',
        'sections' => '$sections'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ext' => 'setExt',
        'sys' => 'setSys',
        'localId' => 'setLocalId',
        'stateId' => 'setStateId',
        'name' => 'setName',
        'address' => 'setAddress',
        'phone' => 'setPhone',
        'email' => 'setEmail',
        'sex' => 'setSex',
        'dob' => 'setDob',
        'aup' => 'setAup',
        'gradYear' => 'setGradYear',
        'schools' => 'setSchools',
        'sections' => 'setSections'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ext' => 'getExt',
        'sys' => 'getSys',
        'localId' => 'getLocalId',
        'stateId' => 'getStateId',
        'name' => 'getName',
        'address' => 'getAddress',
        'phone' => 'getPhone',
        'email' => 'getEmail',
        'sex' => 'getSex',
        'dob' => 'getDob',
        'aup' => 'getAup',
        'gradYear' => 'getGradYear',
        'schools' => 'getSchools',
        'sections' => 'getSections'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }





    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ext'] = isset($data['ext']) ? $data['ext'] : null;
        $this->container['sys'] = isset($data['sys']) ? $data['sys'] : null;
        $this->container['localId'] = isset($data['localId']) ? $data['localId'] : null;
        $this->container['stateId'] = isset($data['stateId']) ? $data['stateId'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['sex'] = isset($data['sex']) ? $data['sex'] : null;
        $this->container['dob'] = isset($data['dob']) ? $data['dob'] : null;
        $this->container['aup'] = isset($data['aup']) ? $data['aup'] : null;
        $this->container['gradYear'] = isset($data['gradYear']) ? $data['gradYear'] : null;
        $this->container['schools'] = isset($data['schools']) ? $data['schools'] : null;
        $this->container['sections'] = isset($data['sections']) ? $data['sections'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sys'] === null) {
            $invalidProperties[] = "'sys' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ext
     *
     * @return map[string,object]|null
     */
    public function getExt()
    {
        return $this->container['ext'];
    }

    /**
     * Sets ext
     *
     * @param map[string,object]|null $ext ext
     *
     * @return $this
     */
    public function setExt($ext)
    {
        $this->container['ext'] = $ext;

        return $this;
    }

    /**
     * Gets sys
     *
     * @return \Kimono\Model\PersonSysType
     */
    public function getSys()
    {
        return $this->container['sys'];
    }

    /**
     * Sets sys
     *
     * @param \Kimono\Model\PersonSysType $sys sys
     *
     * @return $this
     */
    public function setSys($sys)
    {
        $this->container['sys'] = $sys;

        return $this;
    }

    /**
     * Gets localId
     *
     * @return string|null
     */
    public function getLocalId()
    {
        return $this->container['localId'];
    }

    /**
     * Sets localId
     *
     * @param string|null $localId localId
     *
     * @return $this
     */
    public function setLocalId($localId)
    {
        $this->container['localId'] = $localId;

        return $this;
    }

    /**
     * Gets stateId
     *
     * @return string|null
     */
    public function getStateId()
    {
        return $this->container['stateId'];
    }

    /**
     * Sets stateId
     *
     * @param string|null $stateId stateId
     *
     * @return $this
     */
    public function setStateId($stateId)
    {
        $this->container['stateId'] = $stateId;

        return $this;
    }

    /**
     * Gets name
     *
     * @return \Kimono\Model\NameType|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \Kimono\Model\NameType|null $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Kimono\Model\AddressType|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Kimono\Model\AddressType|null $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets sex
     *
     * @return string|null
     */
    public function getSex()
    {
        return $this->container['sex'];
    }

    /**
     * Sets sex
     *
     * @param string|null $sex sex
     *
     * @return $this
     */
    public function setSex($sex)
    {
        $this->container['sex'] = $sex;

        return $this;
    }

    /**
     * Gets dob
     *
     * @return \DateTime|null
     */
    public function getDob()
    {
        return $this->container['dob'];
    }

    /**
     * Sets dob
     *
     * @param \DateTime|null $dob dob
     *
     * @return $this
     */
    public function setDob($dob)
    {
        $this->container['dob'] = $dob;

        return $this;
    }

    /**
     * Gets aup
     *
     * @return bool|null
     */
    public function getAup()
    {
        return $this->container['aup'];
    }

    /**
     * Sets aup
     *
     * @param bool|null $aup aup
     *
     * @return $this
     */
    public function setAup($aup)
    {
        $this->container['aup'] = $aup;

        return $this;
    }

    /**
     * Gets gradYear
     *
     * @return string|null
     */
    public function getGradYear()
    {
        return $this->container['gradYear'];
    }

    /**
     * Sets gradYear
     *
     * @param string|null $gradYear gradYear
     *
     * @return $this
     */
    public function setGradYear($gradYear)
    {
        $this->container['gradYear'] = $gradYear;

        return $this;
    }

    /**
     * Gets schools
     *
     * @return \Kimono\Model\OrgMembershipRefType[]|null
     */
    public function getSchools()
    {
        return $this->container['schools'];
    }

    /**
     * Sets schools
     *
     * @param \Kimono\Model\OrgMembershipRefType[]|null $schools schools
     *
     * @return $this
     */
    public function setSchools($schools)
    {
        $this->container['schools'] = $schools;

        return $this;
    }

    /**
     * Gets sections
     *
     * @return \Kimono\Model\MembershipRefType[]|null
     */
    public function getSections()
    {
        return $this->container['sections'];
    }

    /**
     * Sets sections
     *
     * @param \Kimono\Model\MembershipRefType[]|null $sections sections
     *
     * @return $this
     */
    public function setSections($sections)
    {
        $this->container['sections'] = $sections;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


